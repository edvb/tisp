(define (caar x) (car (car x)))
(define (cadr x) (car (cdr x)))
(define (cdar x) (cdr (car x)))
(define (cddr x) (cdr (cdr x)))
(define (caaar x) (car (car (car x))))
(define (caadr x) (car (car (cdr x))))
(define (cadar x) (car (cdr (car x))))
(define (caddr x) (car (cdr (cdr x))))
(define (cdaar x) (cdr (car (car x))))
(define (cdadr x) (cdr (car (cdr x))))
(define (cddar x) (cdr (cdr (car x))))
(define (cdddr x) (cdr (cdr (cdr x))))
(define (caaaar x) (car (car (car (car x)))))
(define (caaadr x) (car (car (car (cdr x)))))
(define (caadar x) (car (car (cdr (car x)))))
(define (caaddr x) (car (car (cdr (cdr x)))))
(define (cadaar x) (car (cdr (car (car x)))))
(define (cadadr x) (car (cdr (car (cdr x)))))
(define (caddar x) (car (cdr (cdr (car x)))))
(define (cadddr x) (car (cdr (cdr (cdr x)))))
(define (cdaaar x) (cdr (car (car (car x)))))
(define (cdaadr x) (cdr (car (car (cdr x)))))
(define (cdadar x) (cdr (car (cdr (car x)))))
(define (cdaddr x) (cdr (car (cdr (cdr x)))))
(define (cddaar x) (cdr (cdr (car (car x)))))
(define (cddadr x) (cdr (cdr (car (cdr x)))))
(define (cdddar x) (cdr (cdr (cdr (car x)))))
(define (cddddr x) (cdr (cdr (cdr (cdr x)))))

(define (void? x)
  (cond ((= (type x) "void") t)
        (t ())))
(define (nil? x)
  (cond ((= (type x) "nil") t)
        (t ())))
(define (integer? x)
  (cond ((= (type x) "integer") t)
        (t ())))
(define (decimal? x)
  (cond ((= (type x) "decimal") t)
        (t ())))
(define (ratio? x)
  (cond ((= (type x) "ratio") t)
        (t ())))
(define (string? x)
  (cond ((= (type x) "string") t)
        (t ())))
(define (symbol? x)
  (cond ((= (type x) "symbol") t)
        (t ())))
(define (primitive? x)
  (cond ((= (type x) "primitive") t)
        (t ())))
(define (function? x)
  (cond ((= (type x) "function") t)
        (t ())))
(define (pair? x)
  (cond ((= (type x) "pair") t)
        (t ())))

(define (not x)
  (cond (x ()) (t t)))
(define (list . rest) rest)
(define (apply fn args)
  (eval (cons fn args)))

(define e (exp 1.))
(define (root b p) (pow b (/ 1 p)))
(define (sqrt x) (root x 2))
(define (cbrt x) (root x 3))
(define (logb b x) (/  (log x) (log b)))
(define (log10 x) (logb 10. x))
(define (positive? x) (cond ((> x 0) t) (t ())))
(define (negative? x) (cond ((< x 0) t) (t ())))

(define (! n)
  (cond ((= n 1) 1)
        (t (* n (! (- n 1))))))

(define (newline) (print "\n"))
(define (disp . x) (apply print x) (newline))
(define (disp-string str)
  (cond
    ((string? str) (print "\"" str "\""))
    (t (print str)))
  (newline))
