.TH TISP 1 "January 2019" "0.0.0" 
.PP
.SH NAME
tisp \- tiny lisp
.PP
.SH SYNOPSIS
tisp [-hv] [FILE ...]
.PP
.SH DESCRIPTION
.PP

.PP
tisp is a tiny lisp library designed to to be lightweight and easy to embedded in other programs. Simply drop the 'tisp.c' and 'tisp.h' files into your project and include the header file in order to use the necessary functions for your program. An example command line interpreter is provided in 'main.c'.
.PP
.SH OPTIONS
.TP
\fB-h\fP
Print help and exit
.PP
.TP
\fB-v\fP
Print version info and exit
.PP
.SH USAGE
.PP
Run the program from the command line to launch the REPL, type a command and press enter to see the result.
.PP
.RS 4
.EX

$ tisp
> (+ (+ 1 2) 3)
6
> (+ 1 2 3)
6

.EE
.RE
Alternatively you can pass a file name which will be opened and run, outputting the result before exiting.
.PP
.RS 4
.EX

$ echo '((lambda (x) (+ x 1)) 10)' > inc.lisp
$ tisp inc.lisp
11

.EE
.RE
Commands can also be piped directing into tisp through the command line.
.PP
.RS 4
.EX

$ echo '(= "foo" "foo")' | tisp
t

.EE
.RE
.SH LANGUAGE
.PP
tisp is mainly based off of scheme, with minor features borrowed from other lisps.
.PP
.SS GENERAL
.TP
\fBComments\fP
Single line comments with a semicolon, \fBeg\fP '(cons 1 2) ; ingnored by tisp until new line'.
.PP
.SS TYPES
.TP
\fBNil\fP
Nil, null, empty, or false, represented as an empty list, \fBeg\fP '()'.
.PP
.TP
\fBIntegers\fP
Whole real numbers, positive or negative with optional '+' or '-' prefixes repressively. Also supports scientific notation with a capital or lowercase 'e'. The exponent also needs to be integer which can be positive or negative. \fBeg\fP '1', '-48', '+837e4', '3E-2'.
.PP
.TP
\fBFloating Pointing\fP
Floating point numbers, as know as decimals, are integers followed by a period and an optional integer with leading integers. Like integers can be positive or negative with scientific notation, but still need an integer as an exponent. \fBeg\fP '1.', '+3.14', '-43.00', '800.001e-3'.
.PP
.TP
\fBRationals\fP
Fraction type, a ratio of two integers. Similar rules apply for numerator and dominator as integers (real positive or negative), expect for scientific notation. Will try to simplify fraction where possible, and will through error on division by zero. \fBeg\fP '1/2', '4/3' '-1/2', '01/-30', '-6/-3'.
.PP
.TP
\fBStrings\fP
String of characters contained inside two double quotes. \fBeg\fP '"foo"', '"foo bar"'.
.PP
.TP
\fBSymbols\fP
Case sensitive symbols which can be used as variable names. Supports lower and upper case letters, numbers, as well as the characters '_+-*/=<>?'. First character can not be a number, if the first character is a '+' or '-' then the second digit cannot be a number either. Unlike all the previously listed types, symbols are not self evaluating, but instead return the value they are defined to. Throws an error if a symbol is evaluated without it being previously assigned a value. \fBeg\fP 'foo', 'foo-bar', 'cat9', '+', '>=', 'nil?'.
.PP
.TP
\fBLists\fP
Lists composed of one or more element of any other types, including lists them selves. Expressed with surrounding parentheses and each element is separated by white space. When evaluated runs the first element as function with the rest of the elements as arguments. Technically list is not a type, but simply a nil-terminating chain of nested pairs. A pair is a group of two and only two elements, normally represented as '(a . b)', with 'a' being the first element (car) and 'b' being the second element (cdr). for example '(a b c)' is actually '(a . (b . (c . ())))'. But it is often easier just to think of them as lists.
.PP
.TP
\fBFunctions\fP
Lambda functions created within tisp itself. Called using list syntax where the first element is the function name and any proceeding elements are the arguments. For example '(cadr '(1 2 3))' is a list of elements 'cadr' and ''(1 2 3)'. It calls the function 'cadr' which returns the 2nd element of the first argument given, here a list of size 3. In this case it return a '2'.
.PP
.TP
\fBPrimitives\fP
Functions built in to the language written in C. Called like regular functions, see primitives section for more details.
.PP
.SS PRIMITIVES
.PP
Built in primitives included by default.
.PP
.TP
\fBcar\fP
Returns first element of given list
.PP
.TP
\fBcdr\fP
Return rest of the given list, either just the second element if it is of size 2 or a pair, or a new list with the first element removed.
.PP
.TP
\fBcons\fP
Creates a new pair with the two given arguments, first one as the car, second as the cdr.
.PP
.TP
\fBquote\fP
Returns the given argument unevaluated.
.PP
.TP
\fBvoid\fP
Returns nothing. Used to insert a void type in a list or force a function not to return anything.
.PP
.TP
\fBbegin\fP
Executes all of its arguments and returns the value of the last expression.
.PP
.TP
\fBeval\fP
Evaluates the expression given.
.PP
.TP
\fB=\fP
Tests if multiple values equal. Returns nil if any are not, and 't' otherwise.
.PP
.TP
\fBcond\fP
Evaluates each expression if the given condition corresponding to it is true. Runs through any arguments, each is a list with the first element as the condition which needs to be 't' after evaluated, and the second element is the expression to be run if and only if the condition is met.
.PP
.TP
\fBtype\fP
Returns a string stating the given argument's type.
.PP
.TP
\fBlambda\fP
Creates function, first argument is a list of elements representing the symbol name for any arguments for the new function. Next argument is code to be run with the supplied arguments.
.PP
.TP
\fBdefine\fP
Create variable with the name of the first argument, with the value of the second.
.PP
.TP
\fBload\fP
Loads the library, given as a string.
.PP
.SS DIFFERENCES FROM OTHER LISPS
.PP
In tisp there are no boolean types, much like common lisp, true is represented by the self evaluating symbol 't' and false is nil, represented as '()', an empty list.
.PP
tisp also only has one equality primitive, '=', which tests integers, symbols, strings, and objects which occupy the same space in memory, such as primitives. It also accepts any number of arguments to compare.
.PP
Symbols are also case sensitive following the Unix way, unlike many other lisps.
.PP
.SH AUTHOR
.PP
Ed van Bruggen <edvb@uw.edu>
.PP
.SH SEE ALSO
.PP
See project page at <https://edryd.org/projects/tisp.html>
.PP
View source code at <https://git.edryd.org/tisp>
.PP
.SH LICENSE
.PP
zlib License 
.PP

